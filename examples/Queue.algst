-- queue example from Nested Session Types, Section 2

-- auxiliary list functions

data Maybe a = None | Some a
data List a = Nil | Cons a (List a)

last : forall(a:TU). List a -> Maybe a
last [a] xs = case xs of {
  Nil -> None[a],
  Cons y ys ->
    case ys of {
      Nil -> Some[a] y,
      Cons _ _ -> last[a] ys
    }
}

init : forall(a:TU). List a -> List a
init [a] xs = case xs of {
  Nil -> Nil[a],
  Cons y ys ->
    case ys of {
      Nil -> Nil[a],
      Cons _ _ -> Cons[a] y (init[a] ys)
    }
  }

snoc : forall(a:TU). List a -> a -> List a
snoc [a] xs x = case xs of {
  Nil -> Cons[a] x (Nil[a]),
  Cons y ys -> Cons[a] y (snoc[a] ys x)
}

snochead : forall(a:TU). List a -> a -> (a, List a)
snochead [a] xs x = case xs of {
  Nil ->
    (x, Nil[a]),
  Cons y ys ->
    (y, snoc[a] ys x)
}

-- protocol corresponding to queue[alpha]

protocol PMaybe (a:P) = PNone | PSome a
protocol Seq (a:P) (b:P) = Seq a b
protocol Queue a =
  | Ins a (Queue a)
  | Del -(PMaybe (Seq a -(Queue a)))

serverQueue : forall(a:TU).forall(s:S). ?(Queue a).s -> s
serverQueue [a,s] c = serverBack[a,s] (Nil[a]) c

serverBack : forall(a:TU). List a -> forall(s:S). ?(Queue a).s -> s
serverBack [a] xs [s] c = match c with {
  Ins c ->
    let (x, c) = receive [a, ?(Queue a).s] c in
    serverBack [a,s] (Cons[a] x xs) c,
  Del c ->
    case (last[a] xs) of {
      None ->
        select PNone [Seq a -(Queue a), s] c,
      Some x ->
        select PSome [Seq a -(Queue a), s] c
	|> select Seq [a, -Queue a, s]
	|> send [a,?(Queue a).s] x
	|> serverBack[a,s] (init[a] xs)
    }
}

-- protocol corresponding to queue[alpha,x]

data NCons a as = NCons a as
data NNil = NNil

protocol NQueue (a:P) (x:P) =
  | NIns a (NQueue a (NSome a x))
  | NDel x

protocol NSome (a:P) (x:P) =
  | NSome -a (NQueue a x)

protocol NNone =
  | NNone

-- these server functions do implement the queue[a,x] interface of Nested Session Types
-- but they really behave like a stack
-- not clear how to change that...

nserverBack : forall(a:TU). List a ->
              forall (x:P). (forall (s:S). ?x.s -> s) ->
	      forall(s:S). ?(NQueue a x).s -> s
nserverBack [a] qs [x] subServer [s] c = match c with {
  NIns c ->
    let (q, c) = receive[a, ?(NQueue a (NSome a x)).s] c in
    let (qout, qsnew) = snochead[a] qs q in
    nserverBack[a] qsnew [NSome a x] (nsomeBack[a] (NCons[a,List a] qout qsnew) [x] subServer)  [s] c,
  NDel c ->
    subServer [s] c
  }

nsomeBack : forall(a:TU).NCons a (List a) ->
            forall(x:P).(forall (s:S). ?x.s -> s) ->
	    forall(s:S). ?(NSome a x).s -> s
nsomeBack [a] qs [x] subServer [s] c = case qs of {
  NCons q qs ->
    match c with {
        NSome c ->
          send [a, ?(NQueue a x).s] q c
	  |> nserverBack [a] qs [x] subServer [s]
    }
}

nnoneBack : forall(s:S). ?NNone.s -> s
nnoneBack [s] c = match c with {
  NNone c -> c
}

nserverFront : forall(a:TU). forall(s:S). ?(NQueue a NNone).s -> s
nserverFront [a][s] = nserverBack [a] (Nil[a]) [NNone] nnoneBack [s]
