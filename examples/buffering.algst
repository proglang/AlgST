printThree : ∀ (a:TU). ?a.?a.?a.End? -> ()
printThree [a] c =
  let _ = traceMsg "Receiver started" in
  let (x, c) = receive [a, ?a.?a.End?] c in
  let _ = trace [a] x in
  let _ = usleep 1500000 in
  let (y, c) = receive [a, ?a.End?] c in
  let _ = trace [a] y in
  let _ = usleep 1500000 in
  let (z, c) = receive [a, End?] c in
  let _ = trace [a] z in
  wait c

sendThree : ∀ (a:TU). a -> a -> a -> !a.!a.!a.End! -o ()
sendThree [a] x y z c =
  let _ = traceMsg "Sending first" in
  let c = send [a, !a.!a.End!] x c in
  let _ = traceMsg "Sending second" in
  let c = send [a, !a.End!] y c in
  let _ = traceMsg "Sending third" in
  let c = send [a, End!] z c in
  let _ = terminate c in
  traceMsg "all sent"

main : ()
main =
  let (send3, recv3) = new [!Int.!Int.!Int.End!] in
  let _ = fork_ (sendThree [Int] 10 20 30 send3) in
  let _ = usleep 1500000 in
  let _ = fork_ (printThree [Int] recv3) in
  ()
